#include <iostream>
/**************************************************************
Write a function that, given a 4-digit number, performs the "descending digits" operation.
This operation returns a number with the same 4 digits sorted in descending order.

desc_digits(1234) -> 4321
desc_digits(3253) -> 5332
desc_digits(9800) -> 9800
desc_digits(3333) -> 3333
desc_digits(120) -> 2100
**************************************************************/
using namespace std;

int functieSortare(int)
{
    int vectorSortat[4] ,aux, i, j = 0;
    bool schimbare = true;
    while(schimbare)
    {
        schimbare = false;
        j++;
        for(i = 0; i < 4 - j; i++)
        {
            if(vectorSortat[i] < vectorSortat[i+1])
            {
                aux = vectorSortat[i];
                vectorSortat[i] = vectorSortat[i+1];
                vectorSortat[i+1] = aux;
                schimbare = true;
            }
        }
    }
    return vectorSortat[4];
}

int main()
{
    int numarIntrodusVector[4], ascendentNumarIntrodus[4], rezultatScadere, numarIntrodus, numarIntrodusAscendent, i, j;


    cout << "Introdu un numar: ";
    cin >> numarIntrodus;
// Introcudere numar in vector

// Sortare numar descendent
    functieSortare(numarIntrodusVector[4]);
//Creere vector ascendent
    for(i = 0, j = 3; i < 4; i++, j--)
    {
        ascendentNumarIntrodus[j] = numarIntrodusVector[i];
    }
//Rezultatul scaderii a doi vectori
    numarIntrodus = numarIntrodusVector[0]*1000+numarIntrodusVector[1]*100+numarIntrodusVector[2]*10+numarIntrodusVector[3];
    numarIntrodusAscendent = ascendentNumarIntrodus[0]*1000+ascendentNumarIntrodus[1]*100+ascendentNumarIntrodus[2]*10+ascendentNumarIntrodus[3];
    cout << numarIntrodus << " " << numarIntrodusAscendent;

    return 0;
}


int[4] tra(int n)
{

    int numarIntrodusVector[4];

    if(100 < numarIntrodus && numarIntrodus < 1000)
    {
        numarIntrodusVector[0] = 0;
        numarIntrodusVector[1] = numarIntrodus / 100;
        numarIntrodusVector[2] = numarIntrodus % 100 / 10;
        numarIntrodusVector[3] = numarIntrodus % 10;
    }
    else if(1000 <= numarIntrodus && numarIntrodus <= 9999)
    {
        numarIntrodusVector[0] = numarIntrodus / 1000;
        numarIntrodusVector[1] = numarIntrodus % 1000 / 100;
        numarIntrodusVector[2] = numarIntrodus % 100 / 10;
        numarIntrodusVector[3] = numarIntrodus % 10;
    }
    else
    {
        //cout << "\nNumar in afara limitelor.\n\n";
        //return 0;
        numarIntrodusVector[0]=-1;
    }

    return numarIntrodusVector;
}

